class Style {  
    constructor() {  
        this.themes = {  
            light: {  
                "color": "#000000",  
                "dark-color": "#FFFFFF",
                "background": "#F5F6F8",
                "selection-background": "#fff",
                "main-color": "#0FC6C2",
                "hover-color": "#0A8A87"
            },  
            dark: {  
                "color": "#000000",  
                "dark-color": "#FFFFFF"  
            }  
        };  
        this.documentStyle = document.createElement("style");  
        document.head.append(this.documentStyle);  
        this.applyTheme("light"); 
        this.setStyles({
            "html,body,p,h1,h2,h3,h4,h5,h6": "margin:0;padding:0",
            "a,p,h1,h2,h3,h4,h5": "color: var(--color)",
            "a": "text-decoration: none",
            ".app-flex": [
                "display: flex",
                "flex-wrap: wrap"
            ],
        })
    }  
  
    applyTheme(themeName = "") {  
        const theme = this.themes[themeName] || this.themes[Object.keys(this.themes)[0]];  
        const rootStyles = {};  
        for (const key in theme) {  
            rootStyles[`--${key}`] = theme[key];  
        }  
        this.setStyle(":root", rootStyles);  
    }  
    setStyles(tables) {
        Object.entries(tables).forEach(([key, value]) => this.setStyle(key, value)) 
    }
    setStyle(tag, code) {  
        if (Array.isArray(code)) code = code.join(";")
        if (typeof code === 'object') code = Object.entries(code).map(([key, value]) => `${key}: ${value}`).join(';');  
        const styleRule = `${tag} { ${code} }`;  
        const styleSheet = this.documentStyle.sheet;  
        if (styleSheet) {  
            try {  
                styleSheet.insertRule(styleRule, styleSheet.cssRules.length);  
            } catch (e) {  
                this.documentStyle.appendChild(document.createTextNode(styleRule));  
            }  
        } else {  
            this.documentStyle.appendChild(document.createTextNode(styleRule));  
        }  
    }  
}
class Task {
    constructor(func, delay, interval = null, ...args) {
        this.func = func
        this.args = args
        this.delay = delay
        this.interval = interval
        this._task = setTimeout(() => this._run(), delay)
    }
    _run() {
        try {
            this.func(...this.args)
        } catch (error) {
            console.error(...error)
        }
        if (this.interval != null) {
            this._task = setTimeout(() => this._run(), this.interval)
        }
    }
    block() {
        if (this._task != null) clearTimeout(this._task)
        this._task = null
    }
}
class Element {
    constructor(tag, isElement = false) {
        this.base = isElement ? tag : document.createElement(tag)
        this._resize_handler = []
        this._setText = null
        this._childrens = []
        window.addEventListener("resize", (...event) => this._resize(...event))
    }
    setHTML(content) {
        this.base.innerHTML = content;
        return this
    }
    setText(content) {
        this.base.innerText = content;
        return this
    }
    setValue(content) {
        this.base.value = content
        return this
    }
    title(content) {
        return this.setText(content)
    }
    html(content) {
        return this.setHTML(content)
    }
    append(...elements) {
        for (const element of elements) {
            if (element instanceof Element) {
                this._childrens.push(element)
                this.base.append(element.valueOf())
            } else {
                this._childrens.push(new Element(this.isDOM(element) ? element : (new DOMParser()).parseFromString(element, 'text/html'), true))
            }
        }
        return this
    }
    id(name) {
        this.base.id = name
        return this
    }
    class(...classes) {
        for (const clazz of classes) {
            for (const cls of clazz.split(" ")) this.base.classList.add(cls)
        }
        return this
    }
    toggle(clazz) {
        this.base.classList.toggle(clazz)
        return this;
    }
    removeClass(...classes) {
        for (const clazz of classes) {
            for (const cls of clazz.split(" ")) this.base.classList.remove(cls)
        }
        return this
    }
    style(style) {
        this.base.style = style
        return this;
    }
    _resize(...event) {
        for (const func of this._resize_handler) {
            try {
                func(...event)
            } catch (e) {
                console.log(e, func)
            }
        }
    }
    setStyle(key, value) {
        this.base.style[key] = value
        return this;
    }
    valueOf() {
        return this.base
    }
    containsClass(...classes) {
        for (const clazz of classes) {
            for (const cls of clazz.split(" ")) if (this.base.classList.contains(cls)) return true
        }
        return false
    }
    setAttribute(key, value) {
        this.base.setAttribute(key, value)
        return this
    }
    isDOM(value) { return value instanceof HTMLElement ||  
        Object.prototype.toString.call(value) === '[object HTMLUnknownElement]' ||  
        (value && typeof value === 'object' && value.nodeType === 1 && typeof value.nodeName === 'string');  
    };
    clear() {
        while (this.base.firstChild != null) this.base.removeChild(this.base.firstChild)
        return this
    }
    event(name, func) {
        if (name == "resize") {
            this._resize_handler.push(func)
            return this
        }
        this.base.addEventListener(name, func)
        return this
    }
    getChildrens() {
        return this._childrens
    }
}
class Router {  
    constructor(prefix = "") {    
        this._prefix = prefix;  
        this._cur = window.location.pathname.slice(this._prefix.length)
    }    
    route(page) {  
        this._cur = page
        window.dispatchEvent(new Event("popstate"));  
        history.pushState({ page: page }, "", this._prefix + page);  
    }  
    handler() {
        app.$Menu.select(this._cur.slice(1).replaceAll("/", "."))
    }
}  
class Application {
    constructor() {
        this.$Router = new Router("/pages");
        this.$Style = new Style();
        this.$content = this.createElement("div").class("main-container")
        this.$styles = {
            "*": [
                "box-sizing: border-box;magin:0;padding:0"
            ],
            "::-webkit-scrollbar, html ::-webkit-scrollbar": "width: 5px;height: 5px;border-radius: 10px",
            "::-webkit-scrollbar-thumb, html ::-webkit-scrollbar-thumb": "box-shadow: inset 0 0 6px #0000;background-color: #666;border-radius: 10px",
            "header button": [
                "border: none",
                "background: none",
                "padding: 8px 16px",
                "border-radius: 99px",
                "transition: 300ms",
                "font-size: 24px",
                "font-weight: bolder",
                "cursor: pointer"
            ],
            "header button:hover": [
                "background: var(--main-color)",
                "color: var(--dark-color)"
            ],
            "header button:active": [
                "background: var(--hover-color)",
                "color: var(--dark-color)"
            ],
            "header": [
                "background-color: var(--background)", 
                "text-align: center",  
                "min-height: 56px",
                "padding: 8px",
                "display: flex",
                "flex-wrap: nowrap",
                "align-items: center", "justify-content: space-between",
            ],
            "body": [
                "background: var(--background)",
                "background-size: cover",
                "width: 100vw",
                "height: 100vh"
            ],
            ".main": "display: flex; height: calc(100vh - 112px)",
            ".side": [
                "position: relative",
                "min-width: 200px",
                "padding: 20px",
                "height: 100%",
                "box-shadow: rgba(145, 158, 171, 0.2) 0px 4px 10px",
                "opacity: 1",
                "transition: min-width 250ms linear 0s, width 250ms linear 0s, padding 250ms linear 0s, box-shadow 250ms linear 0s, opacity 250ms linear 0s"
            ],
            ".side.hidden": [
                "min-width: 0",
                "width: 0",
                "padding: 0",
                "opacity: 0",
                "box-shadow: none",
            ],
            ".main-container": [
                "min-width: calc(100% - 200px)",
                "width: 100%",
                "padding: 20px",
                "transition: width 250ms linear 0s, padding 250ms linear 0s",
            ],
            ".side.hidden ~ .main-container": [
                "min-width: 100%",
                "width: 100%",
                "padding: 20px",
                "transition: width 250ms linear 0s, padding 250ms linear 0s",
            ],
            "header .content": [
                "display: flex",
                "align-items: center"
            ],
            "header .content h3": [
                "border-left: 1px solid rgb(227, 232, 239)",
                "padding: 8px"
            ],
            "header .content i": [
                "padding: 8px",
                "cursor: pointer"
            ],
            ".main-container .panel": [
                `background-color: rgb(255, 255, 255);
                color: rgb(0, 0, 0);
                transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                border-radius: 4px;
                background-image: none;
                padding: 24px;
                box-shadow: rgba(145, 158, 171, 0.2) 0px 4px 10px;
                margin: 16px;`
            ],
            ".main-container .panel .title": [
                `display: flex;
                margin: 0px 0px 6px;
                font-family: inherit;
                font-weight: 400;
                line-height: 1.5;
                color: rgba(0, 0, 0, 0.5);
                font-size: 14px;`
            ],
            ".main-container .panel .value": [
                `margin: 0px;
                font-family: inherit;
                font-weight: 400;
                line-height: 1.5;
                color: rgba(0, 0, 0, 0.7);
                font-size: 24px;`
            ]
        }
        this.$side = this.createElement("aside").class("side")
        this.$container = this.createElement("div").class("main").append(
            this.$side,
            this.$content
        )
        this.$header = this.createElement("header").append(
            this.createElement("div").class("content").append(
                this.createElement("i").class("bx bx-menu").style("font-size: 32px").event("click", () => {
                    this.$side.toggle("hidden")
                    setTimeout(() => {
                        window.dispatchEvent(new Event("resize"))
                    }, 500)
                }),
                this.createElement("h3").append(
                    this.createElement("a").setAttribute("href", $github).setText(document.title)
                )
            ),
            this.createElement("button").setText("Login")
        )
        document.body.prepend(
            this.$header.valueOf(),
            this.$container.valueOf(),
        )
        this.$Style.setStyles(this.$styles)
        this.$Menu = new Menu(this, this.$side);
        this.$flexes = []
        window.addEventListener("resize", () => {
            for (const flex of this.$flexes) {
                flex.update(false)
            }
        })
    }
    runTaskLater(handler, delay, ...args) {
        return new Task(handler, delay, null, ...args)
    }
    runTaskRepeat(handler, delay, interval, ...args) {
        return new Task(handler, delay, interval, ...args)
    }
    addFlex(element) {
        this.$flexes.push(element)
    }
    resizeFlex(cur) {
        for (const flex of this.$flexes) {
            if (cur.base == flex.base) continue
            flex.update(false)
        }
    }
    createFlex() {
        return new ElementFlex()
    }
    createElement(tag) {
        return new Element(tag);
    }
    setStyles(tables) {
        this.$Style.setStyles(tables)
    }
}
class Preloader {
    constructor() {
        this.$page = app.createElement("div").class("preloader")
        this.$page.append(
            app.createElement("div").class("load")
        )
        this.$styles = {
            ".preloader": `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1003;
            background: #000000;
            overflow: hidden;
            opacity: 1;
            transition: opacity 500ms linear 0s`,
            ".preloader.hidden": "opacity: 0",
            ".preloader .load": `display: block;
            position: relative;
            left: 50%;
            top: 50%;
            width: 150px;
            height: 150px;
            margin: -75px 0 0 -75px;
            border-radius: 50%;
            box-shadow: 0 8px 8px 0 #0FC6C2;
            transform: translate3d(0,0,0);
            animation: spin 2s linear infinite;`,
        }
        app.$Style.setStyles(this.$styles)
        document.body.prepend(this.$page.valueOf());
        (new Array(...document.body.children)).forEach(e => {
            if (e == this.$page.valueOf()) return
            e.style.display = "none"
        })
        window.addEventListener("load", () => {
            this.$page.class("hidden");
            setTimeout(() => {
                document.body.removeChild(this.$page.valueOf());
            }, 500);
            (new Array(...document.body.children)).forEach(e => {
                if (e == this.$page.valueOf()) return
                e.style.display = ""
            })
        })
    }
}
class Menu {  
    constructor(app, side) {  
        this.$app = app
        this.$Router = app.$Router
        this.$menus = {}
        this.$base = app.createElement("div").class("list")
        this.$styles = {
            ".side .menu": [
                `outline: 0px;
                border: 0px;
                margin: 0px 0px 4px;
                cursor: pointer;
                user-select: none;
                vertical-align: middle;
                appearance: none;
                color: inherit;
                display: flex;
                -webkit-box-flex: 1;
                -webkit-box-pack: start;
                justify-content: flex-start;
                -webkit-box-align: center;
                align-items: center;
                position: relative;
                text-decoration: none;
                min-width: 0px;
                box-sizing: border-box;
                text-align: left;
                padding: 8px 16px;
                transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                height: 46px;
                border-radius: 4px;`
            ],
            ".side .menu:hover": [
                "background-color: transparent;",
                "color: rgb(15, 198, 194);"
            ],
            ".side .menu.selected": [
                "background: rgb(15, 198, 194)",
                "color: rgb(255, 255, 255)",
                "box-shadow: rgba(15, 198, 194, 0.2) 0px 10px 25px 0px",
            ],
            ".side .menu.selected i": [
                "transform: rotate(90deg)"
            ],
            ".side .submenu": [
                `-webkit-tap-highlight-color: transparent;
                background-color: transparent;
                outline: 0px;
                border: 0px;
                margin: 0px 0px 4px;
                cursor: pointer;
                user-select: none;
                vertical-align: middle;
                appearance: none;
                color: inherit;
                display: flex;
                -webkit-box-flex: 1;
                flex-grow: 1;
                -webkit-box-pack: start;
                justify-content: flex-start;
                -webkit-box-align: center;
                align-items: center;
                position: relative;
                text-decoration: none;
                min-width: 0px;
                box-sizing: border-box;
                text-align: left;
                padding: 8px 16px;
                transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
                height: 40px;
                border-radius: 4px;`
            ],
            ".side .hidden": [
                "display: none"
            ],
            ".side .submenu .cycle span": [
                `width: 4px;
                height: 4px;
                background-color: rgba(0, 0, 0, 0.7);
                border-radius: 50%;`
            ],
            ".side .submenu.selected .cycle span": [
                "background: var(--main-color)",
                "width: 8px",
                "height: 8px"
            ],
            ".side .submenu.selected .text": [
                "font-weight: 700;"
            ],
            ".side .submenu .cycle": [
                `margin-left: 4px;
                width: 10px;
                display: flex;
                -webkit-box-pack: center;
                justify-content: center`
            ],
            ".side .submenu .text": [
                `flex: 1 1 auto;
                min-width: 0px;
                margin-top: 4px;
                margin-bottom: 4px;
                margin-left: 16px;
                color: rgba(0, 0, 0, 0.7);`
            ],
            ".side .list": [
                "overflow: auto"
            ]
        }
        side.append(this.$base)
        this.$index = {}
        this.$last_key =
        this.$app.setStyles(this.$styles)
    }  
    add(key, core) {
        let sub;
        [key, sub] = this.get_key(key)
        if (!(key in this.$menus)) this.$menus[key] = { core, children: [] }
        if (sub != null) this.$menus[key].children.push({key: sub, core})
        else this.$menus[key].core = core
    }
    setIcon(key, icon) {
        let sub;
        [key, sub] = this.get_key(key)
        if (sub != null && key in this.$menus) {
            this.$menus[key].children = this.$menus[key].children.forEach(v => () => {
                if (v.key == sub) v.icon = icon
            })
        }
        if (sub == null && key in this.$menus) this.$menus[key].icon = icon
    }
    remove(key) {
        let sub;
        [key, sub] = this.get_key(key)
        if (sub != null && key in this.$menus) {
            this.$menus[key].children = this.$menus[key].children.filter(v => v.key != sub)
        }
        if (sub == null && key in this.$menus) delete this.$menus[key]
    }
    render() {
        this.$base.clear()
        for (const key in this.$menus) {
            const object = this.$menus[key]
            const div = app.createElement("div").class("menu")
            div.append(app.createElement("div").setHTML(object.icon || ""), app.createElement("span").setText(key)).event("click", () => {
                let page = key
                if (object.children.length != 0) {
                    page += "/" + object.children[0].key
                }
                this.$Router.route("/" + page)
                this.$Router.handler()
            })
            this.$index[key] = {div}
            if (object.children.length != 0) {
                div.append(app.createElement("i").class("bx bx-chevron-right"))
            }
            this.$base.append(div)
            if (object.children.length != 0) {
                const sub = app.createElement("div")
                const subIndex = {}
                for (const subObject of object.children) {
                    const subdiv = app.createElement("div").class("submenu")
                    subdiv.append(app.createElement("div").class("cycle").append(app.createElement("span")), app.createElement("div").class("text").append(app.createElement("span").setText(subObject.key))).event("click", () => {
                        let page = key + "/" + subObject.key
                        this.$Router.route("/" + page)
                        this.$Router.handler()
                    })
                    sub.append(subdiv)
                    subIndex[subObject.key] = subdiv
                }
                this.$index[key].sub = {main: sub, index: subIndex}
                this.$base.append(sub)
            }
        } 
    }
    select(raw_key) {
        let sub, key;
        [key, sub] = this.get_key(raw_key)
        for (const div in this.$index) {
            this.$index[div].div.removeClass("selected")
            if (this.$index[div].sub != null) {
                this.$index[div].sub.main.class("hidden")
                for (const sub in this.$index[div].sub.index) {
                    this.$index[div].sub.index[sub].removeClass("selected")
                }
            }
        }
        this.$index[key].div.class("selected")
        if (sub != null) {
            this.$index[key].sub.main.removeClass("hidden")
            this.$index[key].sub.index[sub].class("selected")
        }
        this.page(raw_key)
    }
    get_key(key) {
        let sub = null;
        [key, sub] = key.split(".", 2)
        return [key, sub]
    }
    page(raw_key) {
        let sub, key;
        while (document.getElementsByClassName("main-container")[0].firstChild != null) document.getElementsByClassName("main-container")[0].removeChild(document.getElementsByClassName("main-container")[0].firstChild)
        if (this.$last_key != null) {
            [key, sub] = this.get_key(this.$last_key)
            if (sub != null) {
                this.$menus[key].children.forEach(e => {
                    if (e.key == sub) {
                        if (e.core != null && ("disconnect" in e.core)) {
                            try {
                                e.core.disconnect()
                            } catch (e) {
                                console.log(e)
                            }
                        } 
                    }
                })
            } else {
                if (this.$menus[key].core != null && ("disconnect" in this.$menus[key].core)) {
                    try {
                        this.$menus[key].core.disconnect()
                    } catch (e) {
                        console.log(e)
                    }
                }
            }
        }
        var r = null;
        $progress.set(50);
        [key, sub] = this.get_key(raw_key)
        if (sub != null) {
            this.$menus[key].children.forEach(e => {
                if (e.key == sub) {
                    if (e.core != null && ("connect" in e.core)) {
                        try {
                            r = e.core.connect()
                        } catch (e) {
                            console.log(e)
                        }
                    } 
                }
            })
        } else {
            if (this.$menus[key].core != null && ("connect" in this.$menus[key].core)) {
                try {
                    r = this.$menus[key].core.connect()
                } catch (e) {
                    console.log(e)
                }
            }
        }
        if (r != null) {
            if (!(r instanceof Promise)) r = new Promise((resolve, reject) => {
                resolve(r);
            })
            r.then((page) => {
                $progress.set(100);
                if (!Array.isArray(page)) page = [page]
                document.getElementsByClassName("main-container")[0].append(...page.map(e => e instanceof Element ? e.valueOf() : e))
            }).catch((page) => {
                $progress.set(100);
            })
        }
    }
    resize() {
        if (this.$last_key != null) {
            [key, sub] = this.get_key(this.$last_key)
            if (sub != null) {
                this.$menus[key].children.forEach(e => {
                    if (e.key == sub) {
                        if (e.core != null && ("resize" in e.core)) {
                            try {
                                e.core.resize()
                            } catch (e) {
                                console.log(e)
                            }
                        } 
                    }
                })
            } else {
                if (this.$menus[key].core != null && ("resize" in this.$menus[key].core)) {
                    try {
                        this.$menus[key].core.resize()
                    } catch (e) {
                        console.log(e)
                    }
                }
            }
        }
    }
}  
class ProgressBar {
    constructor() {
        this.$base = app.createElement("div").class("progressbar");
        this.$cur = 0
        this.$task = 0
        this.$value = 0
        this.$speed = 0.01;
        this.$stop = null
        app.$Style.setStyles({
            ".progressbar": [
                "height: 2px",
                "background-color: var(--main-color)",
                "position: absolute",
                "transition: width 0.5s"
            ]
        });
        document.body.prepend(this.$base.valueOf())
    }
    set(value, speed = null) {
        if (speed != null) this.$speed = speed
        this.$value = value
        this.start()
    }
    start() {  
        if (this.$task) {  
            return; 
        }  
        clearTimeout(this.$stop);
        this.$task = setInterval(() => {  
            this.increaseProgress();  
        }, (this.$speed * 1000.0));  
    }  
    increaseProgress() {  
        if (this.$cur >= this.$value) {
            this.$cur = this.$value
        }
        if (this.$value < 100 && this.$cur < this.$value) {
            this.$cur += Math.min(  
                    ((cur, value) => {
                        const threshold = value * 0.05;
                        return value - cur < threshold ? 0.5 : (value - cur) / threshold / 2
                    })(this.$cur, this.$value) * Math.sin((this.$cur / this.$value) * 0.5 + 0.5,  
                this.$value - this.$cur  
            ));
            this.updateProgress();  
        } else {  
            this.$cur = 100;
            this.updateProgress();  
            this.$stop = setTimeout(() => this.stop(), 500)
        }  
    }  
    updateProgress() {  
        this.$base.style(`width: ${this.$cur}%`)
    }  
    stop() {  
        if (this.$task) {  
            clearInterval(this.$task);  
            this.$task = null;  
            this.$base.style(`width: 0%`)
            this.$speed = 0.1;
        }  
    }  
    changeSpeed(newSpeed) {  
        this.$speed = newSpeed;
        if (this.$task) {  
            this.stop();  
            this.start();  
        }  
    }  
}
class WebSocketClient {
    constructor(url, handlers = {}) {
        this.url = url;
        this.ws = null;
        this.reconnectInterval = 1000;  // 重连间隔为1秒
        this.retryMessage = !(handlers.retryMessage || true)
        this.messageQueue = [];  // 用于缓存消息的队列
        this.handlers = handlers;  // 处理函数的对象
        this.stats = {
            sent: { count: 0, length: 0 },
            received: { count: 0, length: 0 }
        };
        this.connect()
        this.reconnectTask = null;
    }

    close() {
        this.ws.close();
    }

    connect() {
        this.ws = new WebSocket(this.url);

        // 当连接打开时，发送所有缓存的消息，并调用处理函数
        this.ws.onopen = () => {
            if (this.reconnectTask !== null) {
                clearInterval(this.reconnectTask)
                this.reconnectTask = null
            }
            while (this.messageQueue.length > 0) {
                let message = this.messageQueue.shift();
                this.send(message)
            }
            if (this.handlers.onopen) {
                this.handlers.onopen();
            }
        };

        // 当接收到消息时，调用处理函数
        this.ws.onmessage = (event) => {
            this.stats.received.count++;
            this.stats.received.length += event.data.length;
            if (this.handlers.onmessage) {
                this.handlers.onmessage(event);
            }
        };

        // 当连接关闭时，尝试重新连接，并调用处理函数
        this.ws.onclose = () => {
            this.ws = null
            if (this.handlers.onclose) {
                this.handlers.onclose();
            }
            this.reconnectTask = setTimeout(() => this.connect(), this.reconnectInterval)
        };
    }

    send(data) {
        console.log(data, data instanceof BytesBuffer)
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.stats.sent.count++;
            this.stats.sent.length += this.calculateBytes(data);
            this.ws.send(data instanceof BytesBuffer ? data.toBytes() : data);
        } else {
            if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {
                this.connect();
            }
            if (this.retryMessage)
                this.messageQueue.push(data);
        }
    }
    calculateBytes(data) {  
        let bytes;
        if (typeof data === "string") bytes = (new TextEncoder()).encode(data).byteLength
        else if (data instanceof ArrayBuffer || data instanceof DataView || data instanceof Uint8Array) bytes = data.byteLength;
        else if (data instanceof Blob) bytes = data.size
        else if (data instanceof BytesBuffer) bytes = data.len()
        else bytes = (new TextEncoder()).encode(String(data)).byteLength
        return bytes;  
    } 
    getStats() {
        return this.stats;
    }
}
class MinecraftUtils {
    static getVarInt(data) {
        let r = [];
        while (true) {
            if ((data & 0xFFFFFF80) === 0) {
                r.push(data);
                break;
            }
            r.push(data & 0x7F | 0x80);
            data >>= 7;
        }
        return r;
    }
    static getVarIntLength(data) {
        return this.getVarInt(data).length;
    }
}
class BytesBuffer {
    constructor(...data) {
        this.buffer = []
        this.cur = 0
        this.write(...data)
    }
    write(...values) {
        for (const value of values) {
            if (value instanceof BytesBuffer) {
                this.buffer.push(...value.buffer)
            } else if (Number.isInteger(value)) {
                this.buffer.push(value < 0 ? value + 256 : value)
            } else if (Array.isArray(value) && value.filter(v => Number.isInteger(v)).length == value.length) {
                value.forEach(v => this.write(v))
            } else if (value instanceof Uint8Array) {
                for (let i = 0; i < value.byteLength; i++) {
                    this.write(value[i])
                }
            } else if (value instanceof ArrayBuffer) {
                this.write(new Uint8Array(value))
            } else if (!value === undefined) {
                console.log(typeof value, "buf", value)
            }
        }
    }
    read(length = 1) {
        let data = []
        for (let i = 0; i < length; i++) data.push(...this.buffer.slice(this.cur + i, this.cur + i + 1))
        this.cur += length
        return data;
    }
    tell() {
        return this.cur
    }
    readBytes(length) {
        return this.read(length);
    }
    sizeof() {
        return this.buffer.length;
    }
    len() {
        return this.buffer.length;
    }
    toBytes() {
        return new Uint8Array(this.buffer)
    }
    copy() {
        let buf = []
        this.buffer.forEach(v => buf.push(v))
        return buf
    }
}
class DataOutputStream extends BytesBuffer {
    constructor(data) {
        super()
        this.write(data)
    }
    writeInteger(value) {
        this.write((value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, (value >> 0) & 0xFF);
    }
    writeBoolean(value) {
        this.write(value ? 1 : 0)
    }
    writeFloat(value) {
        const bytes = new Uint8Array((new Float32Array([value])).buffer);  
        for (let i = 0; i < 4; i++) {  
            this.write(bytes[i]);  
        }  
    }
    writeDouble(value) {
        const bytes = new Uint8Array((new Float64Array([value])).buffer);  
        for (let i = 0; i < 8; i++) {  
            this.write(bytes[i]);  
        }  
    }
    writeVarInt(value) {
        this.write(MinecraftUtils.getVarInt(value));
        return this;
    }
    writeString(data, encoding = 'utf-8') {
        this.writeVarInt(data.length);
        this.write(new TextEncoder(encoding).encode(data));
        return this;
    }
    writeLong(data) {
        data = data - (data > Math.pow(2, 63) - 1 ? Math.pow(2, 64) : data);
        this.write((data >> 56) & 0xFF, (data >> 48) & 0xFF, (data >> 40) & 0xFF, (data >> 32) & 0xFF, (data >> 24) & 0xFF, (data >> 16) & 0xFF, (data >> 8) & 0xFF, (data >> 0) & 0xFF);
        return this;
    }
    writeUUID(uuid) {
        this.writeLong(uuid.int >> 64);
        this.writeLong(uuid.int & ((1 << 64) - 1));
        return this;
    }
}
class DataInputStream extends BytesBuffer {
    readInteger() {
        let value = this.read(4)
        return ((value[0] << 24) + (value[1] << 16) + (value[2] << 8) + (value[3] << 0))
    }
    readBoolean() {
        return Boolean(this.read(1)[0]);
    }
    readShort() {
        value = this.read(2);
        if (value[0] | value[1] < 0)
            throw EOFError()
        return ((value[0] << 8) + (value[1] << 0))
    }
    readLong() {
        let value = this.read(8)
        value = (
            (value[0] << 56) +
            ((value[1] & 255) << 48) +
            ((value[2] & 255) << 40) +
            ((value[3] & 255) << 32) +
            ((value[4] & 255) << 24) +
            ((value[5] & 255) << 16) +
            ((value[6] & 255) << 8) +
            ((value[7] & 255) << 0))
        return value < BigInt(Math.pow(2, 63) - 1) ? value : value - BigInt(Math.pow(2, 64));
    }
    readDouble() {
        return (new DataView(new Uint8Array(this.readBytes(4)))).getFloat64()
    }
    readFloat() {
        return (new DataView(new Uint8Array(this.readBytes(4)))).getFloat32()
    }
    readVarInt() {
        let i = 0;
        let j = 0;
        let k;
        while (true) {
            k = this.read(1)[0];
            i |= (k & 0x7F) << j * 7;
            j += 1;
            if ((k & 0x80) !== 128) break;
        }
        return i >= 2 ** 31 - 1 ? i - 2 ** 31 * 2 : i;
    }
    readString(maximum = null, encoding = 'utf-8') {
        return new TextDecoder(encoding).decode(new Uint8Array(this.read(maximum == null ? this.readVarInt() : maximum)));
    }
    readBytes(length) {
        return this.read(length);
    }
    readUUID() {
        let m = this.readLong();
        let l = this.readLong();
        return new UUID(m.toBytes().concat(l.toBytes()));
    }
}
class SocketData {
    constructor() {
        this.$url = window.location.protocol + "//" + window.location.host + window.location.pathname
        this.$support = true
        if (this.$support) {
            this.$cache = []
            this.$opened = false
            this.create_ws()
            this.$data = {}
        }
        this.$key = 1;
        this.$globals = []
    }
    register(func) {
        this.$globals.push(func)
    }
    send_http(namespace, data) {
        return new Promise((resolve, reject) => {
            this.$data[key] = { resolve, reject }
            setTimeout(() => {
                if (key in this.$data) reject(new Error("Timeout."))
                delete this.$data[key]
            }, 30000)
            const xhr = new XMLHttpRequest()
            xhr.onload = (event) => {
                if (event.readyState == 4) {
                    console.log(event)
                }
            }
            xhr.setRequestHeader("Content-Type", "application/json")
            xhr.setRequestHeader("X-Accept-Encoding: binary, json")
            xhr.open("POST", `${this.$url}?namespace=${encodeURIComponent(namespace)}`)
            xhr.send(data)
        })
    }
    create_ws() {
        if (!this.$support) throw "Unable to send websocket data."
        if (this.$ws == null) this.$ws = new WebSocketClient("ws" + (this.$url.slice(4)), {
            "onmessage": (msg) => {
                this.read_blob(msg.data).then((data) => {
                    this.recv(data.readVarInt(), data.readString(), this._deserializeData(data))
                })
            },
            "onopen": () => {
                this.$opened = true
                this.$cache.forEach(e => this.$ws.send(e))
                this.$cache = []
            },
            "onclose": () => {
                this.$opened = false
                window.dispatchEvent(new Event("mainsocket_disconnect"))
            }
        })
    }
    read_blob(blob) {
        return new Promise((resolve, reject) => {
            let reader = new FileReader();
            reader.onload = () => {
                let arrayBuffer = reader.result;
                resolve(new DataInputStream(arrayBuffer))
            }
            reader.readAsArrayBuffer(blob)
        })
    }
    send_ws(namespace, data) {
        this.create_ws()
        return new Promise((resolve, reject) => {
            var key = this.$key++
            const buffer = new DataOutputStream()
            buffer.writeVarInt(key)
            buffer.writeString(namespace)
            buffer.write(this._serializeData(data))
            if (!this.$opened) this.$cache.push(buffer)
            else this.$ws.send(buffer)
            this.$data[key] = { resolve, reject }
            setTimeout(() => {
                if (key in this.$data) reject(new Error("Timeout."))
                delete this.$data[key]
            }, 30000)
        })
    }
    send(namespace, data, forceHttp = false) {
        if (this.$support && !forceHttp) {
            return this.send_ws(namespace, data)
        } else {
            return this.send_http(namespace, data)
        }
    }
    recv(key, namespace, data) {
        if (key in this.$data) {
            this.$data[key].resolve(data)
            delete this.$data[key]
        } 
        if (key == 0) window.dispatchEvent(new CustomEvent("mainsocket", {
            namespace, data
        }))
        console.log(namespace, data)
    }
    _deserializeData(input) {
        const type = input.readVarInt()
        switch (type) {
            case 0: // string
                return input.readString()
            case 1: // bool
                return input.readBoolean()
            case 2: // float
                return parseFloat(input.readString())
            case 3: // bool
                return parseInt(input.readString())
            case 4: {// list
                const length = input.readVarInt()
                const data = []
                for (let _ = 0; _ < length; _++) data.push(this._deserializeData(input))
                return data
            }
            case 5: {// table
                const length = input.readVarInt()
                const data = {}
                for (let _ = 0; _ < length; _++) {
                    data[this._deserializeData(input)] = this._deserializeData(input)
                }
                return data
            }
            case 6:
                return null
            default:
                console.log(type)
                return null
        }
    }
    _serializeData(data) {
        const buf = new DataOutputStream()
        switch (typeof data) {
            case "string": {
                buf.writeVarInt(0)
                buf.writeString(data)
                break;
            }
            case "boolean": {
                buf.writeVarInt(1)
                buf.writeBoolean(data)
                break;
            }
            case "number": {
                if (Number.isInteger(data)) {
                    buf.writeVarInt(3)
                    buf.writeString(data.toString())
                }
                break;
            }
            case "object": {
                if (Array.isArray(data)) {
                    buf.writeVarInt(4)
                    buf.writeVarInt(data.length)
                    for (v of data) {
                        buf.write(this._serializeData(v))
                    }
                } else if (data != null) {
                    buf.writeVarInt(5);
                    buf.writeVarInt(Object.keys(data).length);
                    for (const key in data) {  
                        buf.write(this._serializeData(key)); 
                        buf.write(this._serializeData(data[key]));
                    }  
                } else if (data == null) {
                    buf.writeVarInt(6);
                }
                break;
            }
            case "undefined": {
                buf.writeVarInt(6); 
                break;
            }
            default:
                buf.writeVarInt(6); 
                console.log(data)
        }
        return buf
    }
}
class ElementFlex extends Element {
    constructor(tag = "div", isElement = false) {
        super(tag, isElement)
        app.addFlex(this)
        this.class("app-flex")
        this._minwidth  = null
        this._minheight = null
        this._maxwidth  = null
        this._maxheight = null
        this._updateTimer = null
        this._child = 1
        this._childStyle = ''
        this._tag = null
        this._resizes = []
        this._disable = false
        this.update()
    }
    disable() {
        this._disable = true
        return this
    }
    addResize(func) {
        this._resizes.push(func)
        return this
    }
    append(...elements) {
        super.append(...elements.map(e => this.isDOM(e) || e instanceof Element ? e : (new Element("div")).setHTML(e)))
        return this
    }
    tag(tag) {
        this._tag = tag
        return this
    }
    min_width(width) {
        this.minwidth = width
        return this
    }
    max_width(width) {
        this.maxwidth = width
        return this
    }
    min_height(height) {
        this.minheight = height
        return this
    }
    max_height(height) {
        this.maxheight = height
        return this
    }
    height(height) {
        this.setStyle("height", height)
        return this
    }
    width(width) {
        this.setStyle("width", width)
        return this
    }
    style(key, value) {
        app.setStyle(".app-flex." + key + "_" + value, `${key}: ${value}`)
        this.class(key + "_" + value)
        return this
    }
    update(main = true) {
        if (this._disable) return this
        const width = (super.valueOf().offsetWidth - 1)
        let minwidth = this._calcValueWithDisplay(this._minwidth || 0, width)
        let maxwidth = this._calcValueWithDisplay(this._maxwidth, width)
        let newwidth = Number.parseInt(clamp(minwidth, width, maxwidth) / 2) * 2
        const width_avg = Math.max(0, Math.floor((newwidth - 1) / this._child))
        for (const child of this.getChildrens()) {
            const child_style = window.getComputedStyle(child.valueOf())
            const margin = (parseInt(child_style.marginRight, 10) + parseInt(child_style.marginLeft, 10))
            child.valueOf().style = this._childStyle
            child.setStyle("boxSizing", "border-box")
            child.setStyle("width", (newwidth <= minwidth ? width : (width_avg - (Number.isNaN(margin) ? 0 : margin))) + "px")
        }
        for (const func of this._resizes) {
            func()
        }
        if (!main) return this
        app.resizeFlex(main)
        return this
    }
    _calcValueWithDisplay(value, display) { 
        if (value == -1 || value == null) return display
        if (typeof value === 'string' && value.includes('%')) {  
            return Math.floor(display * (parseFloat(value.replace('%', '')) / 100));  
        } else {  
            return value;  
        }  
    }  
    childStyle(value) {
        this._childStyle = value
        return this
    }
    minWidth(value) {
        this._minwidth = value
        return this
    }
    minHeight(value) {
        this._minheight = value
        return this
    }
    maxWidth(value) {
        this._maxwidth = value
        return this
    }
    maxHeight(value) {
        this._maxheight = value
        return this
    }
    child(value) {
        this._child = Math.max(1, Number.parseInt(value.toString()))
        return this
    }
}
const clamp = (min, cur, max) => {  
    return Math.max(min, Math.min(cur, max));  
} 
$github = (() => {
    for (child of document.head.children) {
        if (child.getAttribute("github")) return "//github.com/" + child.getAttribute("github")
    }
    return ""
})();
app = new Application()
$preloader = new Preloader()
$progress = new ProgressBar();
const $MainSocket = new SocketData()
app.$Menu.add("dashboard", new class {
    async init() {
        this.page = [
            app.createElement("div").class("panel").append(
                app.createFlex().append(
                    app.createElement("div").append(
                        app.createElement("p").class("title").setText("运行时间"),
                        app.createElement("p").class("value").setText("-")
                    ),
                    app.createElement("div").append(
                        app.createElement("p").class("title").setText("当前状态"),
                        app.createElement("p").class("value").setText("-")
                    )
                ).minWidth(768).child(2)
            ),
            app.createFlex().child(2).append(
                app.createElement("div").append(
                    app.createElement("div").class("panel").append(
                        app.createFlex().child(4).append(
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.today.requests"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.today.filebytes"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.in30days.requests"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.in30days.filebytes"),
                                app.createElement("p").class("value").setText("-")
                            )
                        ).minWidth(384)
                    ),
                    app.createElement("div").class("panel").append(
                        app.createFlex().child(4).append(
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.connections"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.memory"),
                                app.createElement("p").class("value").setText("-")
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.file_cache"),
                                app.createElement("p").append(
                                    app.createElement("span").class("value"),
                                    app.createElement("span")
                                )
                            ),
                            app.createElement("div").append(
                                app.createElement("p").class("title").setText("dashboard.in5mins.load"),
                                app.createElement("p").class("value").setText("-")
                            )
                        ).minWidth(384)
                    )
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.in5mins.requests", {count: "-"}),
                    app.createElement("p").class("value").style("min-height: 162px;")
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.download.hourly"),
                    app.createElement("p").class("value").style("min-height: 128px")
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.bytes.hourly"),
                    app.createElement("p").class("value").style("min-height: 128px")
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.download.daily"),
                    app.createElement("p").class("value").style("min-height: 128px")
                ),
                app.createElement("div").class("panel").append(
                    app.createElement("p").class("title").setText("dashboard.bytes.daily"),
                    app.createElement("p").class("value").style("min-height: 128px")
                )
            ).child(2).minWidth(896).addResize(() => {
                //this._e_bytes.resize();
                //this._e_daily_bytes.resize()
                //this._e_hits.resize()
                //this._e_daily_hits.resize()
                //this._e_qps.resize()
            })
            
        ]
        await $MainSocket.send("uptime").then((data) => {
            this.uptime = data
        })
        await $MainSocket.send("status").then((data) => {
            this.status = data
        })
        await $MainSocket.send("qps").then((data) => {
            this.qps = data
        })
        await $MainSocket.send("dashboard").then((data) => {
            this.dashboard = data
        })
        this.setDisplay()
        this.setStatus();
        this.uptimeTimer?.block()
        this.uptimeTimer = app.runTaskRepeat(() => {
            this.page[0].getChildrens()[0].getChildrens()[0].getChildrens()[1].setText(this._format_time(this.uptime, true))
        }, 0, 1000)
    }
    setDisplay() {
        //this.page[0].getChildrens()[0].getChildrens()[0].getChildrens()[1].setText(this._format_time(this.uptime, true))
    }
    setStatus() {
        this.page[0].getChildrens()[0].getChildrens()[1].getChildrens()[1].setText(this.status.key)
    }
    _format_time(n, sub = false) {
        if (n == null) return "-"
        let seconds = Number.parseInt(n)
        if (sub) seconds = Number.parseInt((new Date()).valueOf() / 1000.0 - seconds)
        return `${parseInt(seconds / 60 / 60 / 24).toString().padStart(2, '0')} 天 ${parseInt(seconds / 60 / 60 % 24).toString().padStart(2, '0')} 小时 ${parseInt(seconds / 60 % 60).toString().padStart(2, '0')} 分钟 ${parseInt(seconds % 60).toString().padStart(2, '0')} 秒`
    }
    connect() {
        return new Promise(async (resolve, reject) => {
            await this.init()
            resolve(this.page)
            setTimeout(() => window.dispatchEvent(new Event("resize")), 1)
        })
    }
    resize() {
    }
    disconnect() {
        this.uptimeTimer?.block()
    }
})
app.$Menu.add("config.storage", new class {
    constructor() {

    }
    connect() {
        return new Promise((resolve, reject) => {

        })
    }
    disconnect() {

    }
})
window.addEventListener("load", () => {
    app.$Router.handler()
})
app.$Menu.render();
window.addEventListener("resize", () => {
    app.$Menu.resize()
    console.log("resize")
})